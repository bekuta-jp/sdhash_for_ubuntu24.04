// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blooms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blooms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blooms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blooms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blooms_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blooms_2eproto;
namespace blooms {
class BloomFilter;
struct BloomFilterDefaultTypeInternal;
extern BloomFilterDefaultTypeInternal _BloomFilter_default_instance_;
class BloomVector;
struct BloomVectorDefaultTypeInternal;
extern BloomVectorDefaultTypeInternal _BloomVector_default_instance_;
}  // namespace blooms
PROTOBUF_NAMESPACE_OPEN
template<> ::blooms::BloomFilter* Arena::CreateMaybeMessage<::blooms::BloomFilter>(Arena*);
template<> ::blooms::BloomVector* Arena::CreateMaybeMessage<::blooms::BloomVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blooms {

// ===================================================================

class BloomFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blooms.BloomFilter) */ {
 public:
  inline BloomFilter() : BloomFilter(nullptr) {}
  ~BloomFilter() override;
  explicit PROTOBUF_CONSTEXPR BloomFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BloomFilter(const BloomFilter& from);
  BloomFilter(BloomFilter&& from) noexcept
    : BloomFilter() {
    *this = ::std::move(from);
  }

  inline BloomFilter& operator=(const BloomFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilter& operator=(BloomFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BloomFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BloomFilter* internal_default_instance() {
    return reinterpret_cast<const BloomFilter*>(
               &_BloomFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BloomFilter& a, BloomFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BloomFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BloomFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BloomFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BloomFilter& from) {
    BloomFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blooms.BloomFilter";
  }
  protected:
  explicit BloomFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 6,
    kNameFieldNumber = 5,
    kBfSizeFieldNumber = 1,
    kMaxElemFieldNumber = 2,
    kElemCountFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // repeated fixed64 filter = 6;
  int filter_size() const;
  private:
  int _internal_filter_size() const;
  public:
  void clear_filter();
  private:
  uint64_t _internal_filter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_filter() const;
  void _internal_add_filter(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_filter();
  public:
  uint64_t filter(int index) const;
  void set_filter(int index, uint64_t value);
  void add_filter(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_filter();

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 bf_size = 1;
  bool has_bf_size() const;
  private:
  bool _internal_has_bf_size() const;
  public:
  void clear_bf_size();
  uint64_t bf_size() const;
  void set_bf_size(uint64_t value);
  private:
  uint64_t _internal_bf_size() const;
  void _internal_set_bf_size(uint64_t value);
  public:

  // optional uint64 max_elem = 2;
  bool has_max_elem() const;
  private:
  bool _internal_has_max_elem() const;
  public:
  void clear_max_elem();
  uint64_t max_elem() const;
  void set_max_elem(uint64_t value);
  private:
  uint64_t _internal_max_elem() const;
  void _internal_set_max_elem(uint64_t value);
  public:

  // optional uint64 elem_count = 3;
  bool has_elem_count() const;
  private:
  bool _internal_has_elem_count() const;
  public:
  void clear_elem_count();
  uint64_t elem_count() const;
  void set_elem_count(uint64_t value);
  private:
  uint64_t _internal_elem_count() const;
  void _internal_set_elem_count(uint64_t value);
  public:

  // optional uint32 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blooms.BloomFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t bf_size_;
    uint64_t max_elem_;
    uint64_t elem_count_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blooms_2eproto;
};
// -------------------------------------------------------------------

class BloomVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blooms.BloomVector) */ {
 public:
  inline BloomVector() : BloomVector(nullptr) {}
  ~BloomVector() override;
  explicit PROTOBUF_CONSTEXPR BloomVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BloomVector(const BloomVector& from);
  BloomVector(BloomVector&& from) noexcept
    : BloomVector() {
    *this = ::std::move(from);
  }

  inline BloomVector& operator=(const BloomVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomVector& operator=(BloomVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BloomVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const BloomVector* internal_default_instance() {
    return reinterpret_cast<const BloomVector*>(
               &_BloomVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BloomVector& a, BloomVector& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BloomVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BloomVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BloomVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BloomVector& from) {
    BloomVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blooms.BloomVector";
  }
  protected:
  explicit BloomVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFilterCountFieldNumber = 1,
    kIdFieldNumber = 3,
    kFilesizeFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 filter_count = 1;
  bool has_filter_count() const;
  private:
  bool _internal_has_filter_count() const;
  public:
  void clear_filter_count();
  int32_t filter_count() const;
  void set_filter_count(int32_t value);
  private:
  int32_t _internal_filter_count() const;
  void _internal_set_filter_count(int32_t value);
  public:

  // optional int32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional uint64 filesize = 4;
  bool has_filesize() const;
  private:
  bool _internal_has_filesize() const;
  public:
  void clear_filesize();
  uint64_t filesize() const;
  void set_filesize(uint64_t value);
  private:
  uint64_t _internal_filesize() const;
  void _internal_set_filesize(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:blooms.BloomVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t filter_count_;
    int32_t id_;
    uint64_t filesize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blooms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BloomFilter

// optional uint64 bf_size = 1;
inline bool BloomFilter::_internal_has_bf_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BloomFilter::has_bf_size() const {
  return _internal_has_bf_size();
}
inline void BloomFilter::clear_bf_size() {
  _impl_.bf_size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t BloomFilter::_internal_bf_size() const {
  return _impl_.bf_size_;
}
inline uint64_t BloomFilter::bf_size() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.bf_size)
  return _internal_bf_size();
}
inline void BloomFilter::_internal_set_bf_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bf_size_ = value;
}
inline void BloomFilter::set_bf_size(uint64_t value) {
  _internal_set_bf_size(value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.bf_size)
}

// optional uint64 max_elem = 2;
inline bool BloomFilter::_internal_has_max_elem() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BloomFilter::has_max_elem() const {
  return _internal_has_max_elem();
}
inline void BloomFilter::clear_max_elem() {
  _impl_.max_elem_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t BloomFilter::_internal_max_elem() const {
  return _impl_.max_elem_;
}
inline uint64_t BloomFilter::max_elem() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.max_elem)
  return _internal_max_elem();
}
inline void BloomFilter::_internal_set_max_elem(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_elem_ = value;
}
inline void BloomFilter::set_max_elem(uint64_t value) {
  _internal_set_max_elem(value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.max_elem)
}

// optional uint64 elem_count = 3;
inline bool BloomFilter::_internal_has_elem_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BloomFilter::has_elem_count() const {
  return _internal_has_elem_count();
}
inline void BloomFilter::clear_elem_count() {
  _impl_.elem_count_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t BloomFilter::_internal_elem_count() const {
  return _impl_.elem_count_;
}
inline uint64_t BloomFilter::elem_count() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.elem_count)
  return _internal_elem_count();
}
inline void BloomFilter::_internal_set_elem_count(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.elem_count_ = value;
}
inline void BloomFilter::set_elem_count(uint64_t value) {
  _internal_set_elem_count(value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.elem_count)
}

// optional uint32 id = 4;
inline bool BloomFilter::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BloomFilter::has_id() const {
  return _internal_has_id();
}
inline void BloomFilter::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t BloomFilter::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t BloomFilter::id() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.id)
  return _internal_id();
}
inline void BloomFilter::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void BloomFilter::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.id)
}

// optional string name = 5;
inline bool BloomFilter::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BloomFilter::has_name() const {
  return _internal_has_name();
}
inline void BloomFilter::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BloomFilter::name() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BloomFilter::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.name)
}
inline std::string* BloomFilter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blooms.BloomFilter.name)
  return _s;
}
inline const std::string& BloomFilter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BloomFilter::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BloomFilter::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BloomFilter::release_name() {
  // @@protoc_insertion_point(field_release:blooms.BloomFilter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BloomFilter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blooms.BloomFilter.name)
}

// repeated fixed64 filter = 6;
inline int BloomFilter::_internal_filter_size() const {
  return _impl_.filter_.size();
}
inline int BloomFilter::filter_size() const {
  return _internal_filter_size();
}
inline void BloomFilter::clear_filter() {
  _impl_.filter_.Clear();
}
inline uint64_t BloomFilter::_internal_filter(int index) const {
  return _impl_.filter_.Get(index);
}
inline uint64_t BloomFilter::filter(int index) const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.filter)
  return _internal_filter(index);
}
inline void BloomFilter::set_filter(int index, uint64_t value) {
  _impl_.filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.filter)
}
inline void BloomFilter::_internal_add_filter(uint64_t value) {
  _impl_.filter_.Add(value);
}
inline void BloomFilter::add_filter(uint64_t value) {
  _internal_add_filter(value);
  // @@protoc_insertion_point(field_add:blooms.BloomFilter.filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BloomFilter::_internal_filter() const {
  return _impl_.filter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BloomFilter::filter() const {
  // @@protoc_insertion_point(field_list:blooms.BloomFilter.filter)
  return _internal_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BloomFilter::_internal_mutable_filter() {
  return &_impl_.filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BloomFilter::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:blooms.BloomFilter.filter)
  return _internal_mutable_filter();
}

// -------------------------------------------------------------------

// BloomVector

// optional int32 filter_count = 1;
inline bool BloomVector::_internal_has_filter_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BloomVector::has_filter_count() const {
  return _internal_has_filter_count();
}
inline void BloomVector::clear_filter_count() {
  _impl_.filter_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t BloomVector::_internal_filter_count() const {
  return _impl_.filter_count_;
}
inline int32_t BloomVector::filter_count() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.filter_count)
  return _internal_filter_count();
}
inline void BloomVector::_internal_set_filter_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filter_count_ = value;
}
inline void BloomVector::set_filter_count(int32_t value) {
  _internal_set_filter_count(value);
  // @@protoc_insertion_point(field_set:blooms.BloomVector.filter_count)
}

// optional string name = 2;
inline bool BloomVector::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BloomVector::has_name() const {
  return _internal_has_name();
}
inline void BloomVector::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BloomVector::name() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BloomVector::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blooms.BloomVector.name)
}
inline std::string* BloomVector::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:blooms.BloomVector.name)
  return _s;
}
inline const std::string& BloomVector::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BloomVector::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BloomVector::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BloomVector::release_name() {
  // @@protoc_insertion_point(field_release:blooms.BloomVector.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BloomVector::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blooms.BloomVector.name)
}

// optional int32 id = 3;
inline bool BloomVector::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BloomVector::has_id() const {
  return _internal_has_id();
}
inline void BloomVector::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t BloomVector::_internal_id() const {
  return _impl_.id_;
}
inline int32_t BloomVector::id() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.id)
  return _internal_id();
}
inline void BloomVector::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void BloomVector::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blooms.BloomVector.id)
}

// optional uint64 filesize = 4;
inline bool BloomVector::_internal_has_filesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BloomVector::has_filesize() const {
  return _internal_has_filesize();
}
inline void BloomVector::clear_filesize() {
  _impl_.filesize_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t BloomVector::_internal_filesize() const {
  return _impl_.filesize_;
}
inline uint64_t BloomVector::filesize() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.filesize)
  return _internal_filesize();
}
inline void BloomVector::_internal_set_filesize(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.filesize_ = value;
}
inline void BloomVector::set_filesize(uint64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:blooms.BloomVector.filesize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blooms

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blooms_2eproto
