// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blooms.proto

#include "blooms.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blooms {
PROTOBUF_CONSTEXPR BloomFilter::BloomFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filter_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bf_size_)*/uint64_t{0u}
  , /*decltype(_impl_.max_elem_)*/uint64_t{0u}
  , /*decltype(_impl_.elem_count_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u} {}
struct BloomFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BloomFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BloomFilterDefaultTypeInternal() {}
  union {
    BloomFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BloomFilterDefaultTypeInternal _BloomFilter_default_instance_;
PROTOBUF_CONSTEXPR BloomVector::BloomVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_count_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.filesize_)*/uint64_t{0u}} {}
struct BloomVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BloomVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BloomVectorDefaultTypeInternal() {}
  union {
    BloomVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BloomVectorDefaultTypeInternal _BloomVector_default_instance_;
}  // namespace blooms
static ::_pb::Metadata file_level_metadata_blooms_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_blooms_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_blooms_2eproto = nullptr;

const uint32_t TableStruct_blooms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_.bf_size_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_.max_elem_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_.elem_count_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomFilter, _impl_.filter_),
  1,
  2,
  3,
  4,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::blooms::BloomVector, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blooms::BloomVector, _impl_.filter_count_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomVector, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomVector, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::blooms::BloomVector, _impl_.filesize_),
  1,
  0,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::blooms::BloomFilter)},
  { 18, 28, -1, sizeof(::blooms::BloomVector)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::blooms::_BloomFilter_default_instance_._instance,
  &::blooms::_BloomVector_default_instance_._instance,
};

const char descriptor_table_protodef_blooms_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014blooms.proto\022\006blooms\"n\n\013BloomFilter\022\017\n"
  "\007bf_size\030\001 \001(\004\022\020\n\010max_elem\030\002 \001(\004\022\022\n\nelem"
  "_count\030\003 \001(\004\022\n\n\002id\030\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\016"
  "\n\006filter\030\006 \003(\006\"O\n\013BloomVector\022\024\n\014filter_"
  "count\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\022\020\n"
  "\010filesize\030\004 \001(\004"
  ;
static ::_pbi::once_flag descriptor_table_blooms_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_blooms_2eproto = {
    false, false, 215, descriptor_table_protodef_blooms_2eproto,
    "blooms.proto",
    &descriptor_table_blooms_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_blooms_2eproto::offsets,
    file_level_metadata_blooms_2eproto, file_level_enum_descriptors_blooms_2eproto,
    file_level_service_descriptors_blooms_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_blooms_2eproto_getter() {
  return &descriptor_table_blooms_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_blooms_2eproto(&descriptor_table_blooms_2eproto);
namespace blooms {

// ===================================================================

class BloomFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<BloomFilter>()._impl_._has_bits_);
  static void set_has_bf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_elem(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_elem_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BloomFilter::BloomFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:blooms.BloomFilter)
}
BloomFilter::BloomFilter(const BloomFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BloomFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_){from._impl_.filter_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.bf_size_){}
    , decltype(_impl_.max_elem_){}
    , decltype(_impl_.elem_count_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bf_size_, &from._impl_.bf_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.bf_size_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:blooms.BloomFilter)
}

inline void BloomFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.bf_size_){uint64_t{0u}}
    , decltype(_impl_.max_elem_){uint64_t{0u}}
    , decltype(_impl_.elem_count_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BloomFilter::~BloomFilter() {
  // @@protoc_insertion_point(destructor:blooms.BloomFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BloomFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_.~RepeatedField();
  _impl_.name_.Destroy();
}

void BloomFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BloomFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:blooms.BloomFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filter_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.bf_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.bf_size_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BloomFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 bf_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bf_size(&has_bits);
          _impl_.bf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_elem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_elem(&has_bits);
          _impl_.max_elem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 elem_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elem_count(&has_bits);
          _impl_.elem_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "blooms.BloomFilter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_filter(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_filter(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BloomFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blooms.BloomFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 bf_size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bf_size(), target);
  }

  // optional uint64 max_elem = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_elem(), target);
  }

  // optional uint64 elem_count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_elem_count(), target);
  }

  // optional uint32 id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "blooms.BloomFilter.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // repeated fixed64 filter = 6;
  for (int i = 0, n = this->_internal_filter_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_filter(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blooms.BloomFilter)
  return target;
}

size_t BloomFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blooms.BloomFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 filter = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_filter_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_filter_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 bf_size = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bf_size());
    }

    // optional uint64 max_elem = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_elem());
    }

    // optional uint64 elem_count = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elem_count());
    }

    // optional uint32 id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BloomFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BloomFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BloomFilter::GetClassData() const { return &_class_data_; }


void BloomFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BloomFilter*>(&to_msg);
  auto& from = static_cast<const BloomFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blooms.BloomFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filter_.MergeFrom(from._impl_.filter_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bf_size_ = from._impl_.bf_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_elem_ = from._impl_.max_elem_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.elem_count_ = from._impl_.elem_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BloomFilter::CopyFrom(const BloomFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blooms.BloomFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomFilter::IsInitialized() const {
  return true;
}

void BloomFilter::InternalSwap(BloomFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filter_.InternalSwap(&other->_impl_.filter_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BloomFilter, _impl_.id_)
      + sizeof(BloomFilter::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(BloomFilter, _impl_.bf_size_)>(
          reinterpret_cast<char*>(&_impl_.bf_size_),
          reinterpret_cast<char*>(&other->_impl_.bf_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BloomFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_blooms_2eproto_getter, &descriptor_table_blooms_2eproto_once,
      file_level_metadata_blooms_2eproto[0]);
}

// ===================================================================

class BloomVector::_Internal {
 public:
  using HasBits = decltype(std::declval<BloomVector>()._impl_._has_bits_);
  static void set_has_filter_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BloomVector::BloomVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:blooms.BloomVector)
}
BloomVector::BloomVector(const BloomVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BloomVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.filter_count_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.filesize_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filter_count_, &from._impl_.filter_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filesize_) -
    reinterpret_cast<char*>(&_impl_.filter_count_)) + sizeof(_impl_.filesize_));
  // @@protoc_insertion_point(copy_constructor:blooms.BloomVector)
}

inline void BloomVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.filter_count_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.filesize_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BloomVector::~BloomVector() {
  // @@protoc_insertion_point(destructor:blooms.BloomVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BloomVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void BloomVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BloomVector::Clear() {
// @@protoc_insertion_point(message_clear_start:blooms.BloomVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.filter_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.filesize_) -
        reinterpret_cast<char*>(&_impl_.filter_count_)) + sizeof(_impl_.filesize_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BloomVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 filter_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_filter_count(&has_bits);
          _impl_.filter_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "blooms.BloomVector.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 filesize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filesize(&has_bits);
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BloomVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blooms.BloomVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 filter_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_filter_count(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "blooms.BloomVector.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // optional uint64 filesize = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blooms.BloomVector)
  return target;
}

size_t BloomVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blooms.BloomVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 filter_count = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filter_count());
    }

    // optional int32 id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional uint64 filesize = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filesize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BloomVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BloomVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BloomVector::GetClassData() const { return &_class_data_; }


void BloomVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BloomVector*>(&to_msg);
  auto& from = static_cast<const BloomVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blooms.BloomVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.filter_count_ = from._impl_.filter_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.filesize_ = from._impl_.filesize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BloomVector::CopyFrom(const BloomVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blooms.BloomVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomVector::IsInitialized() const {
  return true;
}

void BloomVector::InternalSwap(BloomVector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BloomVector, _impl_.filesize_)
      + sizeof(BloomVector::_impl_.filesize_)
      - PROTOBUF_FIELD_OFFSET(BloomVector, _impl_.filter_count_)>(
          reinterpret_cast<char*>(&_impl_.filter_count_),
          reinterpret_cast<char*>(&other->_impl_.filter_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BloomVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_blooms_2eproto_getter, &descriptor_table_blooms_2eproto_once,
      file_level_metadata_blooms_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blooms
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blooms::BloomFilter*
Arena::CreateMaybeMessage< ::blooms::BloomFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blooms::BloomFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::blooms::BloomVector*
Arena::CreateMaybeMessage< ::blooms::BloomVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blooms::BloomVector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
